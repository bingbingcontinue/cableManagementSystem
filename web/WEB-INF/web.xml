<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--DispatchServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name> <!-- 定义了 Servlet 的名称，这里是 springmvc。这个名称可以在其他地方引用-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!-- 这是 Spring MVC 的核心组件，用于处理 HTTP 请求和响应-->
        <init-param><!-- 定义初始化参数-->
            <param-name>contextConfigLocation</param-name><!--，这里设置了一个名为 contextConfigLocation 的参数。这个参数指定了 Spring 应用上下文配置文件的位置 -->
            <param-value>
                classpath:applicationContext.xml <!-- classpath:applicationContext.xml 表示配置文件位于类路径下。-->
            </param-value>

        </init-param>
        <load-on-startup>1</load-on-startup> <!-- 指定启动顺序，数字越小优先级越高 指定 Servlet 的加载顺序。值为 1 表示在服务器启动时优先加载这个 Servlet。这通常用来确保 DispatcherServlet 在处理任何请求之前就已经被初始化。-->
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name> <!-- 定义了 Servlet 的名称，这里是 springmvc。这个名称必须与上面的 <servlet-name> 标签中的名称相同-->
        <url-pattern>/</url-pattern><!-- 定义了 Servlet 处理的 URL 模式。这里的 "/" 表示这个 Servlet 将处理所有传入的请求（即根路径及其所有子路径）-->
    </servlet-mapping>

    <!-- shiro配置 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!--乱码过滤-->
    <filter>
        <filter-name>encodingFilter</filter-name><!-- 定义了过滤器的名称，这里是 encodingFilter。这个名称可以在其他地方引用-->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class><!-- 这是 Spring MVC 提供的一个字符编码过滤器，用于处理 HTTP 请求和响应中的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value><!-- 指定了字符编码为 UTF-8。-->
        </init-param>
    </filter>

    <filter-mapping><!-- 定义了过滤器的映射。-->
        <filter-name>encodingFilter</filter-name><!-- 引用上面定义的 encodingFilter 名称，表明要将以下 URL 映射到这个过滤器-->
        <url-pattern>/*</url-pattern><!-- 定义了过滤器处理的 URL 模式。这里的 /* 表示过滤器将应用于所有传入的请求（即所有路径）。-->
    </filter-mapping>

<!-- Session过期时间   Web 应用的会话管理 --><!-- 管理用户会话的生命周期，通过设置超时时间来防止长时间不活动的用户会话继续占用服务器资源。提高应用的安全性，防止未授权访问，特别是在用户忘记登出或离开页面时。-->
   <session-config>
       <session-timeout>15</session-timeout><!-- 该元素指定了会话的超时时间（以分钟为单位）。在这个例子中，设置为 15，表示用户在 15 分钟内没有活动后，服务器会自动使会话失效。-->
   </session-config>

    <welcome-file-list>
        <welcome-file>login.jsp</welcome-file>
    </welcome-file-list>





</web-app>